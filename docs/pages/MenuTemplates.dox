/*! @defgroup MenuTemplates
 *  @brief This module contains strongly-typed, generic, and extensible system for describing Qt menu elements.
 *  @details Classes within this module are located in the namespace Draupnir::Menus.
 *           ### Overview
 *           This module provides a set of template-based "traits" describing menu actions and entries for Qt-based
 *           applications. Each trait defines:
 *           - How to create its associated menu element (`QAction`, `QMenu`, or derived class)
 *           - Display names, icons, and standard shortcuts
 *           - Static API for compile-time, type-safe menu composition and access
 *
 *           Traits are intended to be used with menu containers like Draupnir::Menus::MenuTemplate and
 *           Draupnir::Menus::MenuBarTemplate to automate the construction, translation, and access of menu structures,
 *           eliminating boilerplate.
 *
 *           ### Dependencies & Requirements
 *           This module is using @ref Utils and @ref DraupnirResources modules from the draupnir-lib, which are included
 *           automatically if not yet included. In addition `DraupnirVersion.pri` file is included to enable define
 *           DRAUPNIR_LIB_VERSION with current version of the draupnir-lib.
 *
 *           Option c++20 is added to the CONFIG if not enabled yet.
 *
 *           Qt gui and widgets modules are added to QT config if not enabled yet.
 *
 *           ### Usage
 *           In your *.pro file add the following:
 *           @code{.pri}
 *           # This includes MenuTemplates module from the draupnir-lib.
 *           # Dependencies are added witith the MenuTemplates.pri
 *           include(draupnir-lib/modules/MenuTemplates.pri)
 *           @endcode
 *           It is safe to include the MenuTemplates.pri file more than one time to *.pro.
 *
 *           To create a menu bar or menu with standard entries, simply list the desired trait classes:
 *           @code
 *           using namespace Draupnir::Menus;
 *           MenuBarTemplate<
 *               FileNewEntry,
 *               FileOpenEntry,
 *               FileSaveEntry,
 *               FileCloseEntry,
 *               SeparatorEntry,
 *               ExitApplicationEntry
 *           > menuBar(parent);
 *           @endcode
 *           All entries are created automatically, added to the instantiated MenuBarTemplate, and accessible via the
 *           `get<...>()` methods (see Draupnir::Menus::MenuBarTemplate, Draupnir::Menus::MenuTemplate).
 *
 *           To add your own menu entry, define a trait class with the following static interface:
 *           @code
 *           class MyCustomEntry {
 *           public:
 *              using Type = QAction;
 *
 *              static QAction* createElement(QWidget* parent = nullptr) {
 *                  QAction* result = new QAction{parent};
 *                  // Here configure your QAction, add icon shortcuts, etc.
 *                  return result;
 *              }
 *
 *              static QString displayName() {
 *                  // This method is called when entry for this trait is created and when QEvent of the type LanguageChange
 *                  // is received by the container where this entity is contained will be stored, QObject::tr method can
 *                  // be used here to support localization.
 *                  return "My Entry";
 *              }
 *           };
 *           @endcode
 *
 *           Or use the provided trait templates for common cases:
 *           @code
 *           // This lambda will be called when entry for this trait is created and when QEvent of the type LanguageChange
 *           // is received by the container where this entity is contained will be stored, QObject::tr method can be used
 *           // here to support localization.
 *           inline constexpr auto myDisplayName = []() { return QObject::tr("My Action"); };
 *           using MyAction = ActionEntry<myDisplayName>;
 *           @endcode
 *
 *           For submenus:
 *           @code
 *           using MySubmenu = CustomMenuEntryTrait<myDisplayName, MyCustomMenuWidget>;
 *           @endcode
 *           Then, simply add your trait(s) to Draupnir::Menus::MenuTemplate or Draupnir::Menus::MenuBarTemplate.
 *
 * @todo Restructure the sources within include and src dirs.
 * @todo Integrate @ref MessageSystem with @ref HandlerTemplates and @ref MenuTemplates better.
 * @todo Add list of available entities.
 * @todo Add better examples.
 * @todo Add checks in the *.pri file. If the qt gui / widgets are not enabled - show reasonable error and abort compilation. */

/*! @namespace Draupnir::Menus
 *  @ingroup MenuTemplates
 *  @brief Namespace containing classes from the MenuTemplates module. */
