/*! @defgroup MessageSystem
 *  @brief This module contains message logging and visualization system.
 *
 *  @details Classes within this module are located in the namespace Draupnir::Messages
 *           ### Overview
 *           The MessageSystem module provides an extensible and type-safe framework for logging, handling, storing, and
 *           visualizing runtime messages GUI applications (headless mode will come). It supports per-message-type
 *           notification policies (e.g., show in tray, show dialog, ignore), persistent settings, and seamless integration
 *           with Qt widgets and menus.
 *
 *           The following containers are available:
 *           - `Logger` — global singleton used to send messages into the system.
 *           - `Draupnir::Messages::MessageSystemTemplate` — central glue class that connects handler and UI for a fixed
 *              set of message types.
 *           - `Draupnir::Messages::MessageHandlerTemplate` — stores notification policies for statically defined message
 *              types.
 *           - `Draupnir::Messages::MessageUiBuilderTemplate` — builds widgets and menus for user interaction with message
 *              types.
 *           - `Draupnir::Messages::LogWidgetTemplate` — visual widget for displaying and filtering messages.
 *           - `Draupnir::Messages::NotificationTypeMenu` — reusable QMenu allowing runtime selection of notification behavior.
 *           - `Draupnir::Messages::MessageTrait` classes — define behavior, appearance, and settings keys for each message
 *              type.
 *
 *           - All message types are defined at compile time using variadic templates and trait classes.
 *           - Every message type is associated with:
 *             - a unique 64-bit ID (only one bit set);
 *             - a human-readable name and icon;
 *             - a persistent settings key;
 *             - a default notification level (e.g., `None`, `Dialog`, `Systemtray`);
 *           - UI and core logic are completely decoupled and synchronized via shared MessageHandler.
 *           - All configuration is persistable via `SettingsRegistry` and restored via `loadSettings()`.
 *           - Safe extensibility: custom message types can be added by simply defining new trait classes.
 *
 *           ### Dependencies & Requirements
 *           This module is using @ref Containers and @ref SettingsRegistry modules from the draupnir-lib, which are included
 *           automatically if not yet included. In addition `DraupnirVersion.pri` file is included to enable define
 *           DRAUPNIR_LIB_VERSION with current version of the draupnir-lib.
 *
 *           Option c++20 is added to the CONFIG if not enabled yet.
 *
 *           Qt gui and widgets modules are added to QT config if not enabled yet.
 *
 *           ### Usage
 *           In your *.pro file add the following:
 *           @code{.pri}
 *           # This includes MessageSystem module from the draupnir-lib.
 *           # Dependencies are added within the MessageSystem.pri
 *           include(draupnir-lib/modules/MessageSystem.pri)
 *           @endcode
 *           It is safe to include the MessageSystem.pri file more than one time to *.pro.
 *
 *           Here's how to define a new message type `VeryImportantMessageTrait`, register it, and log messages:
 *           @code
 *           // Define a new message trait
 *           class VeryImportantMessageTrait
 *           {
 *           public:
 *               static constexpr MessageType type = MessageType::nextType(MessageType::FirstCustomType);
 *
 *               static constexpr const char* settingsKey = "veryImportant";
 *
 *               static constexpr Notification::Type defaultNotification = Notification::None;
 *
 *               static QString displayName() { return QObject::tr("Very Important"); }
 *
 *               static const QIcon& icon() {
 *                   static QIcon icon = QIcon(":/icons/very_important.svg");
 *                   return icon;
 *               }
 *           };
 *
 *           // Instantiate the system with your custom trait
 *           using MyMessageSystem = MessageSystemTemplate<VeryImportantMessageTrait>;
 *
 *           // Initialize the system during application startup
 *           auto* system = new MyMessageSystem{};
 *           system->loadSettings(mySettingsRegistry); // optional
 *           Logger::get()->setMessageHandler(system->handler());
 *
 *           // Log messages
 *           logger.logMessage<VeryImportantMessageTrait>("The cake is a lie.");
 *           @endcode
 *
 * @todo Restructure the sources within include and src dirs.
 * @todo Add support of the retranslatable messages. Start from making titles of the Messages retranslatable and end
 *       with the full retranslation support of the messages. */

/*! @namespace Draupnir::Messages
 *  @ingroup MessageSystem
 *  @brief Namespace containing classes from the MessageSystem module. */
